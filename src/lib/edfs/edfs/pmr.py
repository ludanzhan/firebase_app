"""Partition based map-reduce functionality."""
from collections import namedtuple
from typing import Callable, Any
from edfs.tools import *
from edfs.interface import *
from edfs.commands import getPartitionLocations, readPartition
import multiprocessing

init_logger(logLevel='DEBUG')


def mapPartition(fn: Callable[[],Any], p: str) -> str:
    """Given a user-defined function, map this function to partition p and return the transformed data.

    Args:
        fn (Callable[[],]): A user-defined function that can be mapped to the partition p
        p (str): Data stored at partition p, in json format.

    Returns:
        str: Transformed data at location, in json format.
    """
    data = p
    mapped_data = fn(data)
    mapped_partition = mapped_data
    return mapped_partition


def reduce(outputs: list) -> str:
    """Takes a list of the outputs generated by mapPartition and combines them into a single output by concatenating the individual outputs.

    Args:
        outputs (list): List of JSON objects

    Returns:
        str: Single, concatenated object.
    """
    reduced_dict = {}
    for output in outputs:
        if output:
            reduced_dict.update(output)
    return reduced_dict


def partitionMapReduce(fn: Callable[[],Any], filepath: str, database: str='firebase', verbose=False) -> str:
    """Uses the mapPartition() and reduce() functions, in combination with commands implemented earlier, to parallelize the operation on the data and return a single output to the user


    Args:
        fn (Callable[[],]): A user-defined function that can be mapped to the partitions
        filepath (str): Logical path to file in database from root.
        database (str, optional): Database implementation to use for this command. Defaults to 'firebase'.
        verbose (bool, optional): When true, will return verbose output.

    Returns:
        str: Object returned by reduce()
    """
    data = []
    if database == 'firebase':
        exists, _, is_file = check_if_exists(filepath)
        if exists and is_file:
            filepath = filepath.split('.')[0]
            partitionLocations = getPartitionLocations(filepath)
            for k, location in enumerate(partitionLocations):
                data.append(readPartition(location, k, database='firebase'))
        else:
            logger.error(f"File '{filepath}' does not exist!")

    elif database == 'mysql':
        pass

    pool = multiprocessing.Pool()
    args = [(fn, partition) for partition in data]
    results = pool.starmap(mapPartition, args)
    result = reduce(results)

    if verbose:
        return result, data, results

    return result

def united_airline_flight_times(data):
    """Given a dict, returns times of delta airlines flights"""
    # Recall that we are given data that looks like {index: {data}}
    result = {}
    for flight_num, flight in data.items():
        if flight['AIRLINE'] == 'Delta Airlines':
            result[flight_num] = flight['TIME']
    return result


def JFK_flight_time(data):
    """Example Function that preforms some task on the some data"""
    result = {}
    for flight_num, flight in data.items():
        if flight['OriginAirportID'] == 'JFK':
            result[flight_num] = flight['TIME']
    return result


def custom_analytics_function(input):
    """Example Function that preforms some task on the some data"""
    raise NotImplemented

def custom_analytics_function_runner(filepath, analyses_fn, database):
    """
    When this function is called, it will call partitionMapReduce on a predetermined filepath.
    This function will return: 
        a description of the analyses being ran (string)
        a description of how partitionMapReduce works
        the input of MapPartition (for each partition)
        the output of MapPartition / The input to reduce
        the output of reduce (The result of the query)
    """
    res, map_partition_inputs, map_partition_outputs = partitionMapReduce(filepath=filepath, database=database, verbose=True, fn=analyses_fn)
    result = namedtuple("Result", "analyses desc map_partition_inputs map_partition_outputs reduce_output")
    return result(None, None, map_partition_inputs, map_partition_outputs, res)

if __name__ == '__main__':
    # This section of code will only be ran when this file is ran as a script.
    result = partitionMapReduce(filepath='sfo-gate-and-stand-assignment-information-1.csv', fn=united_airline_flight_times)
    print(result)


